import util from "util"
import { createClient } from 'ldapjs';
import { base, filter_fmt, url } from "./ldapConnector";
import type { FindUserType, LDAPuser } from "./LdapTypes"

const findUser: FindUserType = async (username, password) => {

    const opts = {
        filter: util.format(filter_fmt, username),
        scope: "sub"
    }

    try {
        /*
         ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Promise ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ß‡πà‡∏≤ client.search ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ callback
         ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô reject ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πà‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏Å throw error
         ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô callback function scope
        */

        const result = new Promise((resolve, reject) => {
            const client = createClient({ url });
            console.log("------------------------\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...");

            let user = {};

            client.on('connectError', (error) => {
                // Handle connection error
                return reject(error)
            })

            // @ts-ignore
            client.search(base, opts, (error, res) => {
                if (error) return reject(error)

                // @ts-ignore
                // res.on('searchRequest', (searchRequest) => console.log('searchRequest: ', searchRequest.messageId));

                /**
                * @description ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ User ‡∏à‡∏≤‡∏Å LDAP search ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                */
                // @ts-ignore
                res.on('searchEntry', (entry) => user = entry);

                /**
                * @description ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡∏¥‡∏î Error ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
                */
                // @ts-ignore
                res.on('error', (error) => {
                    // console.error('error: ' + error.message);
                    return reject(error)
                });

                /**
                * @description ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô result.status ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0
                */
                // @ts-ignore
                res.on('end', (result) => {
                    console.log(result.status === 0 ? "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ñ‡∏ô‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥ (status = 0) " : "‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á client.search");
                    if (!Object.keys(user).length) return reject(new Error("User not found"))

                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Password ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏°‡πà
                    // @ts-ignore
                    client.bind(user?.dn.toString(), password, (error) => {
                        if (error) return reject(error)
                        console.log("Authenticate user ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ßüéâ...")
                        // @ts-ignore
                        if (user?.pojo) return resolve(user?.pojo)
                        client.unbind();
                        client.destroy();
                    });
                });
            });
        })

        const searchResult = (await result) as LDAPuser

        return { LDAPuser: searchResult, LDAPerror: null }
    } catch (error) {

        // error ‡πÄ‡∏õ‡πá‡∏ô error ‡∏à‡∏£‡∏¥‡∏á‡πÜ - ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô Default case
        if (error instanceof Error) {
            return { LDAPuser: null, LDAPerror: error }
        }

        // error ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        if (typeof error === "string") {
            return { LDAPuser: null, LDAPerror: new Error(error.toString()) }
        }

        // error ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ object structure ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
        if (error instanceof Object) {
            return { LDAPuser: null, LDAPerror: new Error(JSON.stringify(error)) }
        }

        return { LDAPuser: null, LDAPerror: new Error("Unknown error") }
    }
}

export default findUser