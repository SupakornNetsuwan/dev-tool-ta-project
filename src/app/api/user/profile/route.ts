import { NextRequest, NextResponse } from "next/server"
import checkAuth from "@/core/func/checkAuth"
import getProfile from "./func/getProfile"
import type { ProfileFormType as PayloadProfileFormType } from "@/app/profile/types/ProfileFormType"
// Form upload handling
import fileUploadHandler from "@/core/func/fileUploadHandler"

export const GET = async (request: NextRequest) => {
    const { hasPermission, session } = await checkAuth(["ADMIN", "PROFESSOR", "STUDENT", "SUPERADMIN"])
    if (!session) return NextResponse.json({ message: "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" }, { status: 401 })
    if (!hasPermission) return NextResponse.json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ü•π" }, { status: 403 })

    try {
        const profile = await getProfile(session.user.id);
        return NextResponse.json({ message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", data: profile })
    } catch (error) {
        // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        let message = "‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
        if (error instanceof Object && !(error instanceof Error)) message = JSON.stringify(error)
        if (error instanceof Error) message = error.message
        if (typeof error == "string") message = error
        return NextResponse.json({ message }, { status: 400 })
    }
}

export const PATCH = async (request: NextRequest & { url: string }) => {
    const { hasPermission, session } = await checkAuth(["ADMIN", "PROFESSOR", "STUDENT", "SUPERADMIN"])
    if (!session) return NextResponse.json({ message: "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" }, { status: 401 })
    if (!hasPermission) return NextResponse.json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ü•π" }, { status: 403 })

    try {
        const formData = await request.formData();
        const { firstname, lastname, title, address, phoneNumber } = Object.fromEntries(formData)
        const id = session.user.id;
        const email = session.user.email;
        const [classTablePath, transcriptPath, picturePath, bookBankPath] = await Promise.all([
            fileUploadHandler(formData.get("UserDocument[transcriptPath]"), email, "‡∏ó‡∏£‡∏≤‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ"),
            fileUploadHandler(formData.get("UserDocument[classTablePath]"), email, "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"),
            fileUploadHandler(formData.get("UserDocument[bookBankPath]"), email, "‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"),
            fileUploadHandler(formData.get("UserDocument[picturePath]"), email, "‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢")
        ])
        console.log({ classTablePath, transcriptPath, picturePath, bookBankPath })

        /**
         * @remark todo : ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB ‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞ ‡∏ó‡∏≥ Docker volume mount ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà /app/public/uploads
         */

        return NextResponse.json({ message: "I got your message bra!" })
    } catch (error) {
        // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        let message = "‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
        if (error instanceof Object && !(error instanceof Error)) message = JSON.stringify(error)
        if (error instanceof Error) message = error.message
        if (typeof error == "string") message = error
        return NextResponse.json({ message }, { status: 400 })
    }
}