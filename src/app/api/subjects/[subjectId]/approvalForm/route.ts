import checkAuth from "@/core/func/checkAuth"
import { ApprovalFormType } from "@prisma/client"
import { NextRequest, NextResponse } from "next/server"
import updateOrCreateApprovalForm from "./func/updateOrCreateApprovalForm"
import deleteApprovalForm from "./func/deleteApprovalForm"

type ParamsType = {
    params: {
        subjectId: string
    }
}

export const GET = async () => {
    return NextResponse.json({ message: "Hello world!" })
}

/**
 * @description ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ [subjectId] ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á 6 ‡∏ü‡∏≠‡∏£‡πå‡∏°
 * 
 */

export const PUT = async (request: NextRequest, { params: { subjectId } }: ParamsType) => {
    const { hasPermission } = await checkAuth(["ADMIN", "SUPERADMIN", "PROFESSOR"]);
    if (!hasPermission) return NextResponse.json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ü•π" }, { status: 403 })
    console.log(`---------- ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Approval form : ${subjectId} ----------`)

    try {
        const payload = await request.json() // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        const updateApprovalFormResult = await updateOrCreateApprovalForm(subjectId, payload)
        console.log(`‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Approval form ‡∏ß‡∏¥‡∏ä‡∏≤ ${subjectId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ`)
        return NextResponse.json({ message: `‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏¥‡∏ä‡∏≤ ${subjectId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, data: updateApprovalFormResult })
    } catch (error) {
        console.log(error);
        let message = "‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
        if (error instanceof Object && !(error instanceof Error)) message = JSON.stringify(error);
        if (error instanceof Error) message = error.message
        if (typeof error == "string") message = error
        return NextResponse.json({ message }, { status: 400 })
    }
}

export const DELETE = async (request: NextRequest, { params: { subjectId } }: ParamsType) => {
    const { hasPermission } = await checkAuth(["ADMIN", "SUPERADMIN", "PROFESSOR"]);
    if (!hasPermission) return NextResponse.json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ü•π" }, { status: 403 })
    console.log(`---------- ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Approval form : ${subjectId} ----------`)

    try {
        await deleteApprovalForm(subjectId)
        console.log(`‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö Approval form ‡∏ß‡∏¥‡∏ä‡∏≤ ${subjectId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ`)
        return NextResponse.json({ message: "‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" })
    } catch (error) {
        console.log(error);
        let message = "‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
        if (error instanceof Object && !(error instanceof Error)) message = JSON.stringify(error);
        if (error instanceof Error) message = error.message
        if (typeof error == "string") message = error
        return NextResponse.json({ message }, { status: 400 })
    }
}