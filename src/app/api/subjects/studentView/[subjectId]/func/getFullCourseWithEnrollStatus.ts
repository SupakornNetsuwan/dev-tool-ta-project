import { prisma } from "@/core/libs/prisma/connector"
import exclude from "@/core/func/exclude"
import { GetFullCourseWithEnrollStatusType } from "../FullCourseWithEnrollStatusType"
import type { SystemStatusResponseType } from "@/app/api/systemStatus/SystemStatusType"
import getSystemStatus from "@/app/api/systemStatus/func/getSystemStatus"
import dayjs from "dayjs"

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const formatEnrollStatus = (enrollStatus: GetFullCourseWithEnrollStatusType["Enroll"][number]["enrollStatus"], systemStatus: SystemStatusResponseType): GetFullCourseWithEnrollStatusType["Enroll"][number]["formatEnrollStatus"] => {
    switch (enrollStatus) {
        case "PENDING":
            // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏õ‡πá‡∏ô PENDING ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô PENDING ‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            return systemStatus?.isOpen ? "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" : "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
        case "APPROVED":
            // ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏´‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤
            return "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
        case "FINAL_APPROVED":
            return "‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
        default:
            return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ"
    }
}

const getFullCourseWithEnrollStatus = async (userId: string, subjectId: string): Promise<GetFullCourseWithEnrollStatusType> => {
    const systemStatus = await getSystemStatus()
    const result = await prisma.course.findUniqueOrThrow({
        where: {
            subjectId
        },
        include: {
            Enroll: {
                where: {
                    studentId: {
                        equals: userId
                    },
                },
                select: {
                    studentId: true,
                    enrollStatus: true,
                    enrollDate: true,
                }
            },

        }
    })

    // ‡πÄ‡∏≠‡∏≤ passcode ‡πÅ‡∏•‡∏∞ shareWorkloadFile ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
    const excludedResults = exclude(result, ["secretCode", "shareWorkloadFile"])
    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ secretCode ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isNeedSecretCode = Boolean(result.secretCode)
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const enrolledStatus = Boolean(excludedResults.Enroll.length)

    // ‚ú® payload ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ User
    const formatResult = {
        ...excludedResults,
        isEnrolled: enrolledStatus,
        isNeedSecretEnrollCode: isNeedSecretCode,
        Enroll: excludedResults.Enroll.map(enrollment => ({
            ...enrollment,
            formatEnrollStatus: formatEnrollStatus(enrollment.enrollStatus, systemStatus)
        }))
    }

    if (!systemStatus?.isOpen && !formatResult.isEnrolled) {
        // ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞ ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô üü°
        throw new Error(`‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß (${dayjs(systemStatus?.closeDate).format("YYYY/M/D HH:mm")})`)
    }

    // ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏î‡∏π‡∏ú‡∏•‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ üü¢
    return formatResult

}

export default getFullCourseWithEnrollStatus