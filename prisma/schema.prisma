// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id
  email      String   @unique
  fullname   String
  password   String
  role       Role     @default(STUDENT)
  department String
  createdAt  DateTime @default(now())
  Courses    Course[]
  Profile    Profile?
  Enroll     Enroll[]
}

model Profile {
  id             String        @id // id อันเดียวกันกับของ User
  user           User          @relation(fields: [id], references: [id], onDelete: Cascade)
  UserDocument   UserDocument?
  title          String?       @default("นาย")
  firstname      String?
  lastname       String?
  address        String?       @db.MediumText
  phoneNumber    String?
  email          String?
  bookBankNumber String?
  bankName       String?
  degree         String?
}

model UserDocument {
  userId         String  @id
  profile        Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  picturePath    String?
  transcriptPath String?
  classTablePath String?
  bookBankPath   String?
}

model SystemStatus {
  id        Int      @id() @default(autoincrement())
  openDate  DateTime
  closeDate DateTime
  semester  Int
  year      Int
}

enum Role {
  SUPERADMIN
  ADMIN
  PROFESSOR
  STUDENT
}

model Course {
  subjectId       String                @id
  professorId     String?
  professor       User?                 @relation(fields: [professorId], references: [id], onDelete: SetNull)
  nameEng         String
  nameThai        String
  credit          String
  description     String?               @db.Text
  creationStatus  CourseCreationStatus? @default(UNCREATED)
  title           String?               @default("นาย")
  firstname       String?
  lastname        String?
  contact         String?
  enrollCondition String?
  secretCode      String?
  // ตารางสำรายชื่อนักศึกษาที่สมัคร
  Enroll          Enroll[]
  // ฟอร์มการขออนุมัติจ้างนักศึกษา
  approvalForm    ApprovalFormType?
  PracticeForm    PracticeForm[]
  TheoryForm      TheoryForm[]
  ProjectBaseForm ProjectBaseForm[]
}

enum ApprovalFormType {
  PRACTICE
  THEORY
  PROJECTBASE
}

// เป็นฟอร์มแบบขออนุมัติจ้างนักศึกษาประเภทปฏิบัติ
// ใช้กับ ApprovalFromType = PRACTICE
model PracticeForm {
  subjectId           String
  groupNumber         Int
  course              Course    @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
  studentAmount       Int
  taAmount            Int
  taWorkDay           String
  taWorkDayStart      DateTime  @db.Time()
  taWorkDayEnd        DateTime  @db.Time()
  taOtherWorkDay      String?
  taOtherWorkDayStart DateTime? @db.Time()
  taOtherWorkDayEnd   DateTime? @db.Time()
  taHireDuration      String

  @@id([subjectId, groupNumber])
}

// เป็นฟอร์มแบบขออนุมัติจ้างนักศึกษา รายวิชาทฤษฎีแบบทั่วไป
// ใช้กับ ApprovalFromType = THEORY
model TheoryForm {
  subjectId           String
  groupNumber         Int
  course              Course   @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
  studentAmount       Int
  taAmount            Int
  taWorkDay           String
  taWorkDayStart      DateTime @db.Time()
  taWorkDayEnd        DateTime @db.Time()
  taOtherWorkDay      String
  taOtherWorkDayStart DateTime @db.Time()
  taOtherWorkDayEnd   DateTime @db.Time()

  @@id([subjectId, groupNumber])
}

// เป็นฟอร์มแบบขออนุมัติจ้างนักศึกษา รายวิชาทฤษฎีที่สอนแบบ Project base
// ใช้กับ ApprovalFromType = PROJECTBASE
model ProjectBaseForm {
  subjectId           String
  groupNumber         Int
  course              Course   @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
  studentAmount       Int
  taAmount            Int
  taWorkDay           String
  taWorkDayStart      DateTime @db.Time()
  taWorkDayEnd        DateTime @db.Time()
  taOtherWorkDay      String
  taOtherWorkDayStart DateTime @db.Time()
  taOtherWorkDayEnd   DateTime @db.Time()

  @@id([subjectId, groupNumber])
}

enum CourseCreationStatus {
  ENROLLABLE
  CREATED
  UNCREATED
}

model Enroll {
  enrollId     Int          @id @unique @default(autoincrement())
  enrollDate   DateTime     @default(now())
  enrollStatus EnrollStatus
  courseId     String
  course       Course       @relation(fields: [courseId], references: [subjectId], onDelete: Cascade)
  studentId    String
  student      User         @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId])
}

enum EnrollStatus {
  PENDING
  APPROVED
}
