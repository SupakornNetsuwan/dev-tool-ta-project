// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id
  email      String   @unique
  fullname   String
  password   String
  role       Role     @default(STUDENT)
  department String
  createdAt  DateTime @default(now())
  Courses    Course[]
  Profile    Profile?
  Enroll     Enroll[]
}

model Profile {
  id             String        @id // id อันเดียวกันกับของ User
  user           User          @relation(fields: [id], references: [id], onDelete: Cascade)
  UserDocument   UserDocument?
  title          String?       @default("นาย")
  firstname      String?
  lastname       String?
  address        String?       @db.MediumText
  phoneNumber    String?
  email          String?
  bookBankNumber String?
}

model UserDocument {
  userId         String  @id
  profile        Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  picturePath    String?
  transcriptPath String?
  classTablePath String?
  bookBankPath   String?
}

model SystemStatus {
  id        Int      @id() @default(autoincrement())
  openDate  DateTime
  closeDate DateTime
  semester  Int
  year      Int
}

enum Role {
  SUPERADMIN
  ADMIN
  PROFESSOR
  STUDENT
}

model Course {
  subjectId      String                @id
  professorId    String?
  professor      User?                 @relation(fields: [professorId], references: [id])
  nameEng        String
  nameThai       String
  credit         String
  description    String?               @db.Text
  Enroll         Enroll[]
  creationStatus CourseCreationStatus? @default(UNCREATED)
}

enum CourseCreationStatus {
  CREATED
  UNCREATED
}

model Enroll {
  enrollId     Int          @id @unique @default(autoincrement())
  enrollDate   DateTime     @default(now())
  enrollStatus EnrollStatus
  courseId     String?
  course       Course?      @relation(fields: [courseId], references: [subjectId], onDelete: Cascade)
  studentId    String?
  student      User?        @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId])
}

enum EnrollStatus {
  PENDING
  APPROVED
}
